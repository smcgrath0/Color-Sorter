{"version":3,"sources":["context/context.js","main/randomize.js","useInterval/useInterval.js","main/heap/heap.js","main/merge/merge.js","main/quick/quick.js","main/bubble/bubble.js","header/header.js","main/main.js","App.js","serviceWorker.js","index.js"],"names":["AppContext","React","createContext","AppProvider","state","currentColor","currentSort","currentColorArray","Array","keys","sortedArray","setCurrentColorArray","array","setState","prevState","changeSort","e","currentTarget","classList","contains","changeColor","children","this","props","Provider","value","Component","randomize","randNum","Math","random","i","sort","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","heapSort","arr","length","largest","left","right","mergeSort","quickSort","bubbleSort","stateArray","round","slice","temp","Header","context","useContext","arrayLength","useState","counter","setCounter","floor","heapI","setHeapI","heapK","setHeapK","isLoading","setIsLoading","chooseBubbleSort","type","currentObject","filter","element","index","chooseHeapSort","isArray","handleSortClick","handleRandomClick","AppBar","position","Toolbar","style","display","justifyContent","Typography","variant","className","Button","color","onClick","Main","a","colorString","map","colorNumber","key","backgroundColor","chooseColor","myContext","contextType","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.10ffb145.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nconst AppContext = React.createContext();\r\n\r\nclass AppProvider extends Component {\r\n  // Context state\r\n  state = {\r\n    currentColor: \"\",\r\n    currentSort: \"\",\r\n    currentColorArray: [...Array(256).keys()],\r\n    sortedArray: [...Array(256).keys()],\r\n  };\r\n\r\n  setCurrentColorArray = (array) => {\r\n    this.setState((prevState) => ({ ...prevState, currentColorArray: array }));\r\n  };\r\n\r\n  changeSort = (e) => {\r\n    if (e.currentTarget.classList.contains(\"bubble\")) {\r\n      this.setState({ ...this.state, currentSort: \"bubbleSort\" });\r\n    } else if (e.currentTarget.classList.contains(\"heap\")) {\r\n      this.setState({ ...this.state, currentSort: \"heapSort\" });\r\n    } else if (e.currentTarget.classList.contains(\"merge\")) {\r\n      this.setState({ ...this.state, currentSort: \"mergeSort\" });\r\n    } else if (e.currentTarget.classList.contains(\"quick\")) {\r\n      this.setState({ ...this.state, currentSort: \"quickSort\" });\r\n    }\r\n  };\r\n\r\n  changeColor = (e) => {\r\n    if (e.currentTarget.classList.contains(\"red-btn\")) {\r\n      this.setState({ ...this.state, currentColor: \"red\" });\r\n    } else if (e.currentTarget.classList.contains(\"blue-btn\")) {\r\n      this.setState({ ...this.state, currentColor: \"blue\" });\r\n    } else if (e.currentTarget.classList.contains(\"green-btn\")) {\r\n      this.setState({ ...this.state, currentColor: \"green\" });\r\n    } else if (e.currentTarget.classList.contains(\"purple-btn\")) {\r\n      this.setState({ ...this.state, currentColor: \"purple\" });\r\n    } else if (e.currentTarget.classList.contains(\"yellow-btn\")) {\r\n      this.setState({ ...this.state, currentColor: \"yellow\" });\r\n    } else if (e.currentTarget.classList.contains(\"turq-btn\")) {\r\n      this.setState({ ...this.state, currentColor: \"turq\" });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { children } = this.props;\r\n    const { currentColor } = this.state;\r\n    const { currentSort } = this.state;\r\n    const { currentColorArray } = this.state;\r\n    const { sortedArray } = this.state;\r\n    const { changeColor } = this;\r\n    const { changeSort } = this;\r\n    const { setCurrentColorArray } = this;\r\n\r\n    return (\r\n      <AppContext.Provider\r\n        value={{\r\n          sortedArray,\r\n          currentColor,\r\n          changeColor,\r\n          currentSort,\r\n          changeSort,\r\n          currentColorArray,\r\n          setCurrentColorArray,\r\n        }}\r\n      >\r\n        {children}\r\n      </AppContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppContext;\r\n\r\nexport { AppProvider };\r\n","\r\nexport default function randomize( array ) {\r\n  let randNum = Math.random() * 100 + 100;\r\n  for (let i = 0; i < randNum; i++) {\r\n   array.sort(() => Math.random() - 0.5);\r\n  }\r\n  return array;\r\n};\r\n","import { useEffect, useRef } from 'react';\r\n\r\nfunction useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n}\r\n\r\nexport default useInterval;","export default function heapSort(arr, length, i) {\r\n    let largest = i;\r\n    let left = i * 2 + 1;\r\n    let right = left + 1;\r\n\r\n    if(left < length && arr[left] > arr[largest]) {\r\n        largest = left;\r\n    }\r\n\r\n    if(right < length && arr[right] > arr[largest]) {\r\n        largest = right\r\n    }\r\n\r\n    if(largest != i) {\r\n        [arr[i], arr[largest]] = [arr[largest], arr[i]]\r\n        return { arr, length, largest }\r\n    }\r\n    return arr\r\n}\r\n","export default function mergeSort() {}\r\n","export default function quickSort() {}\r\n","export default function bubbleSort(stateArray, round) {\r\n  let array = stateArray.slice(0);\r\n  for (let i = 0; i < array.length - 1 - round; i++) {\r\n    if (array[i] > array[i + 1]) {\r\n      let temp = array[i];\r\n      array[i] = array[i + 1];\r\n      array[i + 1] = temp;\r\n    }\r\n  }\r\n  round++\r\n  return { array, round };\r\n}\r\n","import React, { useState, useContext,useEffect, useRef } from \"react\";\r\nimport { AppBar, Toolbar, Typography, Button } from '@material-ui/core'\r\nimport \"./header.css\";\r\nimport randomize from \"../main/randomize.js\";\r\nimport AppContext from \"../context/context.js\";\r\nimport useInterval from \"../useInterval/useInterval.js\";\r\nimport heapSort from \"../main/heap/heap\";\r\nimport mergeSort from \"../main/merge/merge\";\r\nimport quickSort from \"../main/quick/quick\";\r\nimport bubbleSort from \"../main/bubble/bubble\";\r\n\r\n\r\nfunction Header() {\r\n  let context = useContext(AppContext);\r\n  const arrayLength = context.currentColorArray.length;\r\n  let [ counter, setCounter ] = useState(0);\r\n  let [ heapI, setHeapI ] = useState(Math.floor(arrayLength / 2 - 1));\r\n  let [ heapK, setHeapK ] = useState(arrayLength - 1);\r\n  let [ isLoading, setIsLoading ] = useState(false);\r\n\r\n  let chooseBubbleSort = ( type ) => {\r\n    setIsLoading( true );\r\n    let currentObject = type(context.currentColorArray, counter);\r\n    setCounter(currentObject.round);\r\n    context.setCurrentColorArray(currentObject.array);\r\n\r\n    let check = currentObject.array.filter((element, index) => element === context.sortedArray[index] ? false : true);\r\n    if (check.length === 0) {\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  let chooseHeapSort = ( type ) => {\r\n    setIsLoading( true );\r\n\r\n    if (heapI >= 0) {\r\n      setHeapI(--heapI);\r\n      let current = heapSort(context.currentColorArray, heapI, heapK);\r\n    }\r\n    if (heapK >= 0) {\r\n      setHeapK(--heapK);\r\n      let current = heapSort(context.currentColorArray, heapI, heapK);\r\n      if (current.isArray()) {\r\n\r\n      }\r\n    }\r\n    if (heapI < 0 && heapK < 0) {\r\n      setIsLoading(false);\r\n    }\r\n    let current = heapSort(context.currentColorArray, heapI, heapK);\r\n    if (current.isArray()) {\r\n\r\n      setIsLoading(false);\r\n    } else {\r\n      chooseHeapSort();\r\n    }\r\n  }\r\n\r\n  useInterval( () => {\r\n    if (context.currentSort === 'bubbleSort') {\r\n      chooseBubbleSort(bubbleSort)\r\n    } else if (context.currentSort === 'mergeSort') {\r\n      chooseBubbleSort(mergeSort)\r\n    } else if (context.currentSort === 'quickSort') {\r\n      chooseBubbleSort(quickSort)\r\n    } else if (context.currentSort === 'heapSort') {\r\n      chooseHeapSort(heapSort)\r\n    }\r\n  }, isLoading ? 300 : null)\r\n\r\n  let handleSortClick = ( e ) => {\r\n      setIsLoading( true );\r\n  };\r\n\r\n  let handleRandomClick = ( e ) => {\r\n    setIsLoading(false);\r\n    context.setCurrentColorArray(randomize(context.currentColorArray));\r\n  };\r\n\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n        <div style={{ display: \"flex\" }}>\r\n          <Typography variant=\"h6\" className=\"header-title\">\r\n            Color Sorter\r\n          </Typography>\r\n        </div>\r\n\r\n        <div>\r\n          <Button\r\n            color=\"inherit\"\r\n            className=\"btn btn-sort merge\"\r\n            onClick={(e) => {\r\n              handleRandomClick(e);\r\n            }}\r\n          >\r\n            Randomize\r\n          </Button>\r\n        </div>\r\n\r\n        <div>\r\n          <Button\r\n            color=\"inherit\"\r\n            className=\"btn btn-sort merge\"\r\n            onClick={(e) => {\r\n              context.changeSort(e);\r\n              handleSortClick(e);\r\n            }}\r\n          >\r\n            Merge Sort\r\n          </Button>\r\n          <Button\r\n            color=\"inherit\"\r\n            className=\"btn btn-sort heap\"\r\n            onClick={(e) => {\r\n              context.changeSort(e);\r\n              handleSortClick(e);\r\n            }}\r\n          >\r\n            Heap Sort\r\n          </Button>\r\n          <Button\r\n            color=\"inherit\"\r\n            className=\"btn btn-sort bubble\"\r\n            onClick={(e) => {\r\n              context.changeSort(e);\r\n              handleSortClick(e);\r\n            }}\r\n          >\r\n            Bubble Sort\r\n          </Button>\r\n          <Button\r\n            color=\"inherit\"\r\n            className=\"btn btn-sort quick\"\r\n            onClick={(e) => {\r\n              context.changeSort(e);\r\n              handleSortClick(e);\r\n            }}\r\n          >\r\n            Quick Sort\r\n          </Button>\r\n        </div>\r\n\r\n        <div>\r\n          <Button\r\n            color=\"inherit\"\r\n            className=\"btn turq-btn\"\r\n            onClick={(e) => {\r\n              context.changeColor(e);\r\n              handleRandomClick(e);\r\n            }}\r\n          >\r\n            turq\r\n          </Button>\r\n          <Button\r\n            color=\"inherit\"\r\n            className=\"btn yellow-btn\"\r\n            onClick={(e) => {\r\n              context.changeColor(e);\r\n              handleRandomClick(e);\r\n            }}\r\n          >\r\n            Yellow\r\n          </Button>\r\n          <Button\r\n            color=\"inherit\"\r\n            className=\"btn purple-btn\"\r\n            onClick={(e) => {\r\n              context.changeColor(e);\r\n              handleRandomClick(e);\r\n            }}\r\n          >\r\n            Purple\r\n          </Button>\r\n          <Button\r\n            color=\"inherit\"\r\n            className=\"btn red-btn\"\r\n            onClick={(e) => {\r\n              context.changeColor(e);\r\n              handleRandomClick(e);\r\n            }}\r\n          >\r\n            Red\r\n          </Button>\r\n          <Button\r\n            color=\"inherit\"\r\n            className=\"btn blue-btn\"\r\n            onClick={(e) => {\r\n              context.changeColor(e);\r\n              handleRandomClick(e);\r\n            }}\r\n          >\r\n            Blue\r\n          </Button>\r\n          <Button\r\n            color=\"inherit\"\r\n            className=\"btn green-btn\"\r\n            onClick={(e) => {\r\n              context.changeColor(e);\r\n              handleRandomClick(e);\r\n            }}\r\n          >\r\n            Green\r\n          </Button>\r\n        </div>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./main.css\";\r\nimport randomize from \"./randomize.js\";\r\nimport AppContext from \"../context/context.js\";\r\n\r\nclass Main extends React.Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      counter:   0,\r\n      isLoading: false\r\n    }\r\n  }\r\n\r\n  static myContext = AppContext;\r\n\r\n  componentDidMount() {\r\n    let a = randomize(this.context.currentColorArray);\r\n    this.context.setCurrentColorArray(a);\r\n  }\r\n\r\n  chooseColor ( color ) {\r\n    let colorString = \"\";\r\n    switch (this.context.currentColor) {\r\n      case \"red\":\r\n        colorString = `rgb(${color}, 0, 0)`;\r\n        break;\r\n      case \"blue\":\r\n        colorString = `rgb(0, 0, ${color})`;\r\n        break;\r\n      case \"green\":\r\n        colorString = `rgb(0, ${color}, 0)`;\r\n        break;\r\n      case \"purple\":\r\n        colorString = `rgb(${color}, 0, ${color})`;\r\n        break;\r\n      case \"yellow\":\r\n        colorString = `rgb(${color}, ${color}, 0)`;\r\n        break;\r\n      case \"turq\":\r\n        colorString = `rgb(0, ${color}, ${color})`;\r\n        break;\r\n      default:\r\n        colorString = `rgb(${color}, 0, 0)`;\r\n        break;\r\n    }\r\n    return colorString;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <main>\r\n        {this.context.currentColorArray.map((colorNumber) => {\r\n          return (\r\n            <div\r\n              className=\"item\"\r\n              key={colorNumber}\r\n              style={{ backgroundColor: this.chooseColor(colorNumber) }}\r\n            ></div>\r\n          );\r\n        })}\r\n      </main>\r\n    );\r\n  }\r\n}\r\nMain.contextType = AppContext;\r\nexport default Main;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { AppProvider } from \"./context/context.js\";\r\nimport Header from './header/header.js';\r\nimport Main from './main/main.js';\r\n\r\nfunction App() {\r\n  const appContext = {\r\n    sort: \"merge\",\r\n    color: \"red\"\r\n  };\r\n  return (\r\n    <AppProvider value={appContext}>\r\n      <div className=\"App\">\r\n        <Header></Header>\r\n\r\n        <Main></Main>\r\n      </div>\r\n    </AppProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}